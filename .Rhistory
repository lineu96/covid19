r <- rpois(1000, 2)
densityPlot(r)
densityPlot(r^0.5)
r
r <- rbeta(100, 1,1)
densityPlot(r)
r <- rbeta(100, 1,2)
densityPlot(r)
r <- rbeta(100, 1,3)
densityPlot(r)
r <- rbeta(100, 1,4)
densityPlot(r)
r <- rbeta(100, 1,5)
densityPlot(r)
r <- rbeta(100, 2,5)
densityPlot(r)
r <- rbeta(100, 0.1,5)
densityPlot(r)
r <- rbeta(100, 0.5,5)
densityPlot(r)
symbox(~r)
densityPlot(r)
symbox(~r)
densityPlot(r^0.5)
r <- rbeta(100, 0.6, 5)
densityPlot(r)
symbox(~r)
densityPlot(r^0.5)
r <- rbeta(100, 0.7, 5)
densityPlot(r)
symbox(~r)
densityPlot(r^0.5)
r <- rbeta(100, 0.7, 5)
symbox(~r)
densityPlot(r)
densityPlot(r^0.5)
r <- rbeta(100, 0.7, 5)
symbox(~r)
densityPlot(r)
densityPlot(r^0.5)
bcPower  #box cox tradicional, valores não negativos
x <- rnorm(10, 5,1)
x_bc <- bcPower(U = x, lambda = 2)
lambda = 2
x_bc == (x^(lambda)-1)/lambda
x_log <- bcPower(U = x, lambda = 0)
x_log == log(x)
y <- rnorm(10,10,20)
bcn <- bcnPower(U = y, lambda = 1, gamma = 1)
gamma = 1
bcn2 <- bcPower(0.5*(y + sqrt(y^2 + gamma^2)), lambda = 1)
bcn == bcn2
w <- rnorm(10,10,3)
bcn <- bcnPower(U = w, lambda = 1, gamma = 1)
gamma = 1
bcn2 <- bcPower(0.5*(w + sqrt(w^2 + gamma^2)), lambda = 1)
bcn == bcn2
yjPower()
yjPower(x, lambda = 2) == bcPower(x+1, lambda = 2)
z <- rnorm(10,-1,0.1)
yjPower(z, lambda = 3)
bcPower(abs(z)+1, lambda = 2-3)
basicPower(x, lambda = 2) == x^2
basicPower(x, lambda = 0) == log(x)
g <- rgamma(100, 1,3)
densityPlot(g)
powerTransform(g, family="bcPower")
g2 <- bcPower(U = g, lambda = 0.2827951)
densityPlot(g2)
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
densityPlot(Wool$cycles)
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814))
r <- rbeta(100, 0.7, 5)
symbox(~r)
densityPlot(r)
densityPlot(r^0.5)
boxCox(x)
x
?boxCox
with(quine, boxCox(Days ~ Eth*Sex*Age*Lrn,
lambda = seq(-0.05, 0.45, len = 20),
family="yjPower"))
data("quine", package = "MASS")
with(quine, boxCox(Days ~ Eth*Sex*Age*Lrn,
lambda = seq(-0.05, 0.45, len = 20),
family="yjPower"))
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
densityPlot(trees$Volume)
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
a<-with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
a
plot(a$y ~ a$x)
a <- data.frame(x = a$x,
y = a$y)
subset(a, a$y == max(a$y))
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
bc <- with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
plot(bc)
bc <- with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
a <- data.frame(lambda = a$x,
loglik = a$y)
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
bc <- with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
a <- data.frame(lambda = a$x,
loglik = a$y)
subset(a, a$loglik == max(a$loglik))
a
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
bc <- with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
a <- data.frame(lambda = bc$x,
loglik = bc$y)
a
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
subset(bc, bc$loglik == max(bc$loglik))
densityPlot(trees$Volume)
t <- subset(bc, bc$loglik == max(bc$loglik))
t
densityPlot(trees$Volume)
t[1]
densityPlot(trees$Volume^t[1])
t[1]
densityPlot(trees$Volume^t[1])
as.numeric(t[1])
densityPlot(trees$Volume^as.numeric(t[1]))
densityPlot(trees$Volume)
densityPlot(trees$Volume^as.numeric(t[1]))
densityPlot(trees$Volume)
densityPlot(trees$Volume^as.numeric(t[1]))
densityPlot(trees$Volume)
x
boxCox(x)
boxCox(~x)
boxCox(x~y)
x
y
x <- rgamma(100,1,1)
densityPlot(X)
densityPlot(x)
y <- rpois(100, 4)
densityPlot(y)
z <- rnorm(100, 5)
z
boxCox(x~y+z)
boxCox(Volume ~ log(Height) + log(Girth),
lambda = seq(-0.25, 0.25, length = 10))
boxCox(x~y+z)
bc <- boxCox(x~y+z)
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
t
densityPlot(trees$Volume)
densityPlot(x)
densityPlot(x^as.numeric(t[1]))
with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
bc <- with(trees, boxCox(Volume ~ log(Height) + log(Girth), data = trees,
lambda = seq(-0.25, 0.25, length = 10)))
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
densityPlot(trees$Volume)
densityPlot(trees$Volume^as.numeric(t[1]))
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
boxCox(x~y+z)
bc <- boxCox(x~y+z)
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
densityPlot(x)
densityPlot(x^as.numeric(t[1]))
?boxCoxVariable
?basicPowerAxis
with(UN, plot(log(ppgdp, 10), log(infantMortality, 10)))
basicPowerAxis(0, base=10, side="above",
at=c(50, 200, 500, 2000, 5000, 20000), grid=TRUE,
axis.title="GDP per capita")
basicPowerAxis(0, base=10, side="right",
at=c(5, 10, 20, 50, 100), grid=TRUE,
axis.title="infant mortality rate per 1000")
with(UN, plot(log(ppgdp, 10), log(infantMortality, 10)))
basicPowerAxis(0, base=10, side="above",
at=c(50, 200, 500, 2000, 5000, 20000), grid=TRUE,
axis.title="GDP per capita")
basicPowerAxis(0, base=10, side="right",
at=c(5, 10, 20, 50, 100), grid=TRUE,
axis.title="infant mortality rate per 1000")
with(UN, plot(bcPower(ppgdp, 0), bcPower(infantMortality, 0)))
bcPowerAxis(0, side="above",
grid=TRUE, axis.title="GDP per capita")
bcPowerAxis(0, side="right",
grid=TRUE, axis.title="infant mortality rate per 1000")
boxCox(x~y+z)
?boxCox
?boxTidwell
boxTidwell(prestige ~ income + education, ~ type + poly(women, 2),
data=Prestige)
?boxTidwell(prestige ~ income + education, ~ type + poly(women, 2),
data=Prestige)
densityPlot(Prestige$income)
densityPlot(Prestige$education)
boxTidwell(prestige ~ income + education,
~ type + poly(women, 2),
data=Prestige)
densityPlot(Prestige$income^-0.34763)
densityPlot(Prestige$income)
densityPlot(Prestige$income^-0.34763)
densityPlot(Prestige$education^1.25383)
densityPlot(Prestige$education)
boxTidwell(prestige ~ income + education,
~ type + poly(women, 2),
data=Prestige)
?invTranEstimate
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
?invTranEstimate
with(UN, invTranPlot(ppgdp, infantMortality))
UN$infantMortality
densityPlot(UN$infantMortality)
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
densityPlot(UN$infantMortality)
densityPlot(UN$infantMortality^-0.3208097)
densityPlot(UN$infantMortality^-0.4)
densityPlot(UN$infantMortality^-0.2)
densityPlot(UN$infantMortality^-0.1)
densityPlot(UN$infantMortality^-0.05)
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
densityPlot(UN$infantMortality)
densityPlot(UN$infantMortality^-0.3208097)
?invTranEstimate
densityPlot(UN$ppgdp)
densityPlot(UN$ppgdp^-0.3208097)
?logit
rbinom(10, 5, 0.3)
rbeta(10,1,2)
b <- rbeta(10,1,2)
logit(b)
log(b/(1 - b))
logit(b) == log(b/(1 - b))
logit(b)
log(b/(1 - b))
logit(b) == log(b/(1 - b))
round(logit(b),4) == round(log(b/(1 - b)),4)
?testTransform
powerTransform(cbind(len, adt, trks, sigs1) ~ htype, Highway1)
g <- rgamma(100, 1,3)
densityPlot(g)
powerTransform(g, family="bcPower")
g2 <- bcPower(U = g, lambda = 0.2827951)
densityPlot(g2)
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
densityPlot(Wool$cycles)
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814))
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
p1
a3 <- powerTransform(cbind(len, adt, trks, sigs1) ~ htype, Highway1)
a3
testTransform(a3, c(0, 0, 0, -1))
q1 <- powerTransform(lm(cbind(LoBD$I1L2, LoBD$I1L1) ~ pool, LoBD), family="bcnPower")
q1 <- powerTransform(lm(cbind(LoBD$I1L2, LoBD$I1L1) ~ pool, LoBD), family="bcnPower")
testTransform(q1, c(.3, .8))
# Likelihood-Ratio Tests for Univariate or Multivariate Power Transformations to Normality
x
y
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
t <- powerTransform(x ~ y+z)
t
testTransform(t, c(0))
?boxCoxVariable
?bcPower  #box cox tradicional, valores não negativos
g <- rgamma(100, 1,3)
densityPlot(g)
powerTransform(g, family="bcPower")
g2 <- bcPower(U = g, lambda = 0.2827951)
densityPlot(g2)
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
densityPlot(Wool$cycles)
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814))
g <- rgamma(100, 1,3)
powerTransform(g, family="bcPower") #"bcPower", "bcnPower", "yjPower"
g2 <- bcPower(U = g, lambda = 0.2827951)
par(mfrow = c(1,2))
densityPlot(g, main = 'Original')
densityPlot(g2, main = 'Transformada)
)
)
)
g <- rgamma(100, 1,3)
powerTransform(g, family="bcPower") #"bcPower", "bcnPower", "yjPower"
g2 <- bcPower(U = g, lambda = 0.2827951)
par(mfrow = c(1,2))
densityPlot(g, main = 'Original')
densityPlot(g2, main = 'Transformada')
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
par(mfrow = c(1,2))
densityPlot(Wool$cycles)
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814))
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
par(mfrow = c(1,2))
densityPlot(Wool$cycles, main = 'Original')
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814), main = 'Transformada')
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
r <- rbeta(100, 0.7, 5)
symbox(~r)
densityPlot(r)
densityPlot(r^0.5)
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
boxCox(x~y+z)
bc <- boxCox(x~y+z)
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
densityPlot(x)
densityPlot(x^as.numeric(t[1]))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE,fig.align='center',
fig.height = 5)
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
boxCox(x~y+z)
bc <- boxCox(x~y+z)
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
densityPlot(x)
densityPlot(x^as.numeric(t[1]))
boxTidwell(prestige ~ income + education,
~ type + poly(women, 2),
data=Prestige)
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
ls("package:mcglm")
library(mcglm)
ls("package:mcglm")
bcPower  #box cox tradicional, valores não negativos
x <- rnorm(10, 5,1)
x_bc <- bcPower(U = x, lambda = 2)
lambda = 2
x_bc == (x^(lambda)-1)/lambda
x_log <- bcPower(U = x, lambda = 0)
x_log == log(x)
bcnPower #negativos permitidos
y <- rnorm(10,10,20)
bcn <- bcnPower(U = y, lambda = 1, gamma = 1)
gamma = 1
bcn2 <- bcPower(0.5*(y + sqrt(y^2 + gamma^2)), lambda = 1)
bcn == bcn2
w <- rnorm(10,10,3)
bcn <- bcnPower(U = w, lambda = 1, gamma = 1)
gamma = 1
bcn2 <- bcPower(0.5*(w + sqrt(w^2 + gamma^2)), lambda = 1)
bcn == bcn2
yjPower()
yjPower(x, lambda = 2) == bcPower(x+1, lambda = 2)
basicPower
basicPower(x, lambda = 2) == x^2
basicPower(x, lambda = 0) == log(x)
g <- rgamma(100, 1,3)
densityPlot(g)
powerTransform(g, family="bcPower")
g2 <- bcPower(U = g, lambda = 0.2827951)
densityPlot(g2)
p1 <- powerTransform(cycles ~ len + amp + load, Wool,
family = "bcPower")
densityPlot(Wool$cycles)
densityPlot(bcPower(U = Wool$cycles, lambda = -0.05915814))
r <- rbeta(100, 0.7, 5)
symbox(~r)
densityPlot(r)
densityPlot(r^0.5)
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
boxCox(x~y+z)
bc <- boxCox(x~y+z)
bc <- data.frame(lambda = bc$x,
loglik = bc$y)
t <- subset(bc, bc$loglik == max(bc$loglik))
densityPlot(x)
densityPlot(x^as.numeric(t[1]))
with(UN, plot(log(ppgdp, 10), log(infantMortality, 10)))
basicPowerAxis(0, base=10, side="above",
at=c(50, 200, 500, 2000, 5000, 20000), grid=TRUE,
axis.title="GDP per capita")
basicPowerAxis(0, base=10, side="right",
at=c(5, 10, 20, 50, 100), grid=TRUE,
axis.title="infant mortality rate per 1000")
with(UN, plot(bcPower(ppgdp, 0), bcPower(infantMortality, 0)))
bcPowerAxis(0, side="above",
grid=TRUE, axis.title="GDP per capita")
bcPowerAxis(0, side="right",
grid=TRUE, axis.title="infant mortality rate per 1000")
boxTidwell(prestige ~ income + education,
~ type + poly(women, 2),
data=Prestige)
with(UN, invTranPlot(ppgdp, infantMortality))
with(UN, invTranEstimate(ppgdp, infantMortality))
b <- rbeta(10,1,2)
round(logit(b),4) == round(log(b/(1 - b)),4)
x <- rgamma(100,1,1)
y <- rpois(100, 4)
z <- rnorm(100, 5)
t <- powerTransform(x ~ y+z)
testTransform(t, c(0))
a <- powerTransform(cbind(len, adt, trks, sigs1) ~ htype, Highway1)
testTransform(a, c(0, 0, 0, -1))
q <- powerTransform(lm(cbind(LoBD$I1L2, LoBD$I1L1) ~ pool, LoBD), family="bcnPower")
testTransform(q, c(.3, .8))
nrow(ls("package:mcglm"))
lenght(ls("package:mcglm"))
length(ls("package:mcglm"))
library(gamlss)
length(ls("package:gamlss"))
?Anova
mod <- lm(conformity ~ fcategory*partner.status, data=Moore,
contrasts=list(fcategory=contr.sum, partner.status=contr.sum))
mod <- lm(conformity ~ fcategory*partner.status, data=Moore,
contrasts=list(fcategory=contr.sum, partner.status=contr.sum))
mod
Anova(mod)
Moore
conformity ~ fcategory*partner.status, data=Moore
Anova(mod, type=3)  # note use of contr.sum in call to lm()
Pottery
lm(cbind(Al, Fe, Mg, Ca, Na) ~ Site, data=Pottery)
Anova(lm(cbind(Al, Fe, Mg, Ca, Na) ~ Site, data=Pottery))
Soils
Soils
soils.mod <- lm(cbind(pH,N,Dens,P,Ca,Mg,K,Na,Conduc) ~ Block + Contour*Depth,
data=Soils)
Manova(soils.mod)
prestige
lm(prestige ~ education + log2(income) + type, data = na.ommit(Prestige))
lm(prestige ~ education + log2(income) + type, data = na.omit(Prestige))
m <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
summary(Prestige)
m <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
summary(Prestige)
##Anova Tables for Various Statistical Models
library(car)
summary(Prestige)
m <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
density(m$residuals)
plot(density(m$residuals))
par(mfrow = c(2,2))
plot(m)
plot(m, 1:4)
anova(m)
anova(m)
anova(m)
Anova(m)
summary(m)
anova(m)
Anova(m)
predict(m)
plot(predict(m))
plot(predict(m))
plot(predict(m)~ Prestige$prestige)
plot(predict(m)~ na.omit(Prestige$prestige))
predict(m)
na.omit(Prestige$prestige)
as.numeric(predict(m))
as.numeric(predict(m))
plot(as.numeric(predict(m))~ na.omit(Prestige$prestige))
na.omit(Prestige$prestige))
na.omit(Prestige$prestige)
as.numeric(predict(m))
plot(as.numeric(predict(m)))
plot(na.omit(Prestige$prestige))
loess(predict(m))
setwd("~/covid19")
rrmarkdown::render_site()
rmarkdown::render_site()
