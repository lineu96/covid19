linearHypothesis(mod.davis, diag(2), c(0,1))
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(1,1))
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
linearHypothesis(mod.davis, c("(Intercept)", "repwt = 1"))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
mod.duncan
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
mod.duncan.2
coefs <- names(coef(mod.duncan.2))
coefs
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
mod.davis
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
## the following are equivalent:
## use HC3 standard errors via white.adjust option
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
white.adjust = TRUE)
## covariance matrix *function*
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
vcov = hccm)
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
linearHypothesis(mod.duncan, "income = education")
linearHypothesis(mod.duncan, "income - education")
linearHypothesis(mod.duncan, "1income - 1education = 0")
linearHypothesis(mod.duncan, "0 = 1*income - 1*education")
linearHypothesis(mod.duncan, "income-education=0")
linearHypothesis(mod.duncan, "1*income - 1*education + 1 = 1")
linearHypothesis(mod.duncan, "2income = 2*education")
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
coefs <- names(coef(mod.duncan.2))
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
?mcglm::mc_manova()
?mcglm::mc_manova_disp()
mcglm::mc_anova_disp()
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
## the following are equivalent:
## use HC3 standard errors via white.adjust option
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
white.adjust = TRUE)
beta <- c(2,3,4)
beta_x <- c(0,0,0)
vcov(diag(3))
diag(3)
diag(3)*rnorm(3)
vcov <- diag(3)*rnorm(3)
as.matrix(beta)
beta <- as.matrix(c(2,3,4))
beta
beta_x <- as.matrix(c(0,0,0))
vcov <- diag(3)*rnorm(3)
beta - beta_x
(beta - beta_x) %*% vcov
t((beta - beta_x))
t((beta - beta_x)) %*% vcov
(beta - beta_x)
t((beta - beta_x)) %*% vcov %*% (beta - beta_x)
t((beta - beta_x)) %*% 1/vcov %*% (beta - beta_x)
1/vcov
vcov_inv <- diag(3)*rnorm(3)
t((beta - beta_x)) %*% vcov %*% (beta - beta_x)
beta <- as.matrix(c(2,3,4,5,6,5,4,56))
beta
beta_x <- as.matrix(c(0,0,0,0,0,0,0,0))
beta_x
vcov_inv <- diag(3)*rnorm(3)
vcov_inv <- diag(8)*rnorm(8)
vcov_inv
vcov_inv <- diag(8)*rnorm(8)
t((beta - beta_x)) %*% vcov %*% (beta - beta_x)
t((beta - beta_x)) %*% vcov_inv %*% (beta - beta_x)
## use asymptotic Chi-squared statistic
?linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
mod.davis
hccm(mod.davis)
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
mod.duncan
brief(mod.duncan)
b0 <- -6.06
b1 <- 0.599
b2 <- 0.5458
diag(c(4.27,0.120,0.0983))
vc <- diag(c(4.27,0.120,0.0983))
(b1 - b2)/vc[2,2]
(b2 - b1)/vc[3,3]
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
linearHypothesis(mod.duncan, "income = education")
linearHypothesis(mod.duncan, "income - education")
linearHypothesis(mod.duncan, "1income - 1education = 0")
linearHypothesis(mod.duncan, "0 = 1*income - 1*education")
linearHypothesis(mod.duncan, "income-education=0")
linearHypothesis(mod.duncan, "1*income - 1*education + 1 = 1")
linearHypothesis(mod.duncan, "2income = 2*education")
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
coefs <- names(coef(mod.duncan.2))
coefs
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
coefs
coefs[-1]
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
?hccm
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
coefs[grep(":", coefs)]
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
linearHypothesis(mod.duncan.2, matchCoefs(mod.duncan.2, ":"), verbose=TRUE) # equivalent
?rhs
??rhs
??rhs
linearHypothesis(mod.duncan.2, matchCoefs(mod.duncan.2, ":"), verbose=TRUE) # equivalent
linearHypothesis(mod.duncan.2, matchCoefs(mod.duncan.2, ":"), verbose=TRUE) # equivalent
c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1)
as.matrix(c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1))
as.matrix(c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1),
nrow = 4)
as.matrix(c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1),
nrow = 4, ncol = 9)
?as.matrix
matrix(c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1),
nrow = 4, ncol = 9)
m <- matrix(c(0,        0,      0,      0,         0,               1,             0,                  0,                0,
0,        0,      0,      0,         0,               0,             1,                  0,                0,
0,        0,      0,      0,         0,               0,             0,                  1,                0,
0,        0,      0,      0,         0,               0,             0,                  0,                1),
nrow = 4, ncol = 9)
m
hip <- c(0,0,0,0)
hip
hip <- as.matrix(c(0,0,0,0))
hip
hip <- t(as.matrix(c(0,0,0,0)))
hip
hip %*% m
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
linearHypothesis(mod.duncan.2, matchCoefs(mod.duncan.2, ":"), verbose=TRUE) # equivalent
lh <- linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)])
lh
linearHypothesis(mod.duncan.2, matchCoefs(mod.duncan.2, ":"), verbose=TRUE) # equivalent
lh <- linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)])
lh
attr(lh, "value") # value of linear function
attr(lh, "vcov")  # covariance matrix of linear function
mod.ok <- lm(cbind(pre.1, pre.2, pre.3, pre.4, pre.5,
post.1, post.2, post.3, post.4, post.5,
fup.1, fup.2, fup.3, fup.4, fup.5) ~  treatment*gender,
data=OBrienKaiser)
coef(mod.ok)
## specify the model for the repeated measures:
phase <- factor(rep(c("pretest", "posttest", "followup"), c(5, 5, 5)),
levels=c("pretest", "posttest", "followup"))
hour <- ordered(rep(1:5, 3))
idata <- data.frame(phase, hour)
idata
linearHypothesis(mod.ok, c("treatment1:gender1", "treatment2:gender1"),
title="treatment:gender:phase:hour", idata=idata, idesign=~phase*hour,
iterms="phase:hour")
?poTest
?leveneTest
with(Moore, leveneTest(conformity, fcategory))
brief(with(Moore, leveneTest(conformity, fcategory)))
brief(with(Moore, leveneTest(conformity, fcategory)))
with(Moore, leveneTest(conformity, fcategory))
with(Moore, leveneTest(conformity,
interaction(fcategory, partner.status)))
with(Moore, leveneTest(conformity, fcategory))
leveneTest(conformity ~ fcategory*partner.status,
data=Moore)
leveneTest(lm(conformity ~ fcategory*partner.status, data=Moore))
leveneTest(conformity ~ fcategory*partner.status, data=Moore, center=mean)
leveneTest(conformity ~ fcategory*partner.status, data=Moore, center=mean, trim=0.1)
?durbinWatsonTest
durbinWatsonTest(lm(fconvict ~ tfr + partic + degrees + mconvict, data=Hartnagel))
m <- lm(fconvict ~ tfr + partic + degrees + mconvict, data=Hartnagel)
durbinWatsonTest()
durbinWatsonTest(m)
plot(m)
residuals(m)
m$residuals ~ predict(m)
plot(m$residuals ~ predict(m))
plot(m$residuals ~ predict(m))
cor(m$residuals ~ predict(m))
cor(m$residuals, predict(m))
cor(m$residuals, predict(m)^2)
plot(m
)
?durbinWatsonTest
durbinWatsonTest(m)
plot(m$residuals ~ predict(m))
cor(m$residuals, predict(m))
cor(m$residuals, predict(m)^2)
m <- lm(fconvict ~ tfr + partic + degrees + mconvict, data=Hartnagel)
durbinWatsonTest(m)
plot(m,3)
?durbinWatsonTest
?ncvTest
ncvTest(lm(interlocks ~ assets + sector + nation, data=Ornstein))
ncvTest(lm(interlocks ~ assets + sector + nation, data=Ornstein),
~ assets + sector + nation, data=Ornstein)
?outlierTest
outlierTest(lm(prestige ~ income + education, data=Duncan))
m <- lm(prestige ~ income + education, data=Duncan)
outlierTest(m)
Duncan
outlierTest(m)
whichNames('minister', Duncan)
Duncan[,6]
Duncan[6,]
Duncan
barplot(Duncan$income)
Boxplot(Duncan$income)
Boxplot(Duncan$income)
Boxplot(Duncan$education)
Boxplot(Duncan$prestige)
getwd()
library(rmarkdown)
render_site()
#------------------------------------------------------------
##Anova Tables for Various Statistical Models
#------------------------------------------------------------
library(car)
?anova(m1,m2)
m1 <- lm(prestige ~ education + log2(income) + type,
data = na.omit(Prestige))
m2 <- lm(prestige ~ 1,
data = na.omit(Prestige))
anova(m1,m2)
#Type I analysis of variance
anova(m1)
#Type II analysis of variance
Anova(m1, type = 2)
m3 <- lm(prestige ~ education + log2(income) + type +
education:type + log2(income):type,
data = na.omit(Prestige))
Anova(m3, type = 2)
#------------------------------------------------------------
anova
#------------------------------------------------------------
anova()
#------------------------------------------------------------
anova
stats::anova()
?stats::anova()
#------------------------------------------------------------
# Test Linear Hypothesis
#------------------------------------------------------------
?linearHypothesis
#Examples
mod.davis <- lm(weight ~ repwt, data=Davis)
mod.davis
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
est = "Chisq")
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
linearHypothesis(mod.davis, c("(Intercept)", "repwt = 1"))
## use asymptotic Chi-squared statistic
linearHypothesis(mod.davis, c("(Intercept) = 0", "repwt = 1"),
test = "Chisq")
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
mod.duncan
## the following are all equivalent:
linearHypothesis(mod.duncan, "1*income - 1*education = 0")
mod.duncan <- lm(prestige ~ income + education, data=Duncan)
mod.duncan
mod.duncan.2 <- lm(prestige ~ type*(income + education), data=Duncan)
coefs <- names(coef(mod.duncan.2))
coefs
## test against the null model (i.e., only the intercept is not set to 0)
linearHypothesis(mod.duncan.2, coefs[-1])
mod.duncan.2
coefs[grep(":", coefs)]
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
## test all interaction coefficients equal to 0
linearHypothesis(mod.duncan.2, coefs[grep(":", coefs)], verbose=TRUE)
attr(lh, "value") # value of linear function
attr(lh, "vcov")  # covariance matrix of linear function
solve(1)
solve(diag(rnorm(10)))
diag(rnorm(10))
solve(diag(rnorm(10))) == diag(rnorm(10))
set.seed(1)
solve(diag(rnorm(10))) == diag(rnorm(10))
?confidenceEllipse
?
?marginalModelPlot
c1 <- lm(infantMortality ~ ppgdp, UN)
c1
mmps(c1)
c2 <- update(c1, ~ log(ppgdp))
mmps(c2)
# include SD lines
p1 <- lm(prestige ~ income + education, Prestige)
mmps(p1, sd=TRUE)
# condition on type:
mmps(p1, ~. | type)
# logisitic regression example
# smoothers return warning messages.
# fit a separate smoother and color for each type of occupation.
m1 <- glm(lfp ~ ., family=binomial, data=Mroz)
mmps(m1)
?sigmaHat
m1 <- lm(prestige ~ income + education, data=Duncan)
m1
sigmaHat(m1)
m1 <- lm(prestige ~ income, data=Duncan)
sigmaHat(m1)
m1 <- lm(prestige ~ 0, data=Duncan)
sigmaHat(m1)
m1 <- lm(prestige ~ 1, data=Duncan)
sigmaHat(m1)
plot(prestige ~ 1, data=Duncan)
abline(m1)
abline(m1, col =2)
plot(prestige ~ 0, data=Duncan)
plot(prestige ~ 0, data=Duncan)
1
plot(prestige ~ 1, data=Duncan)
plot(prestige ~ 2, data=Duncan)
plot(prestige ~ 2, data=Duncan)
plot(prestige ~ 1, data=Duncan)
abline(m1, col =2)
y <- rpois(1000,19)
hist(y)
x <- rnorm(1000)
plot(y~x)
x <- rnorm(1000)*y
plot(y~x)
x <- rnorm(1000)*(y+2)
plot(y~x)
x <- rnorm(1000)*y^2
plot(y~x)
x <- rnorm(1000)*y^3
plot(y~x)
x <- rnorm(1000)*y^4
plot(y~x)
x <- rnorm(1000)*y^10
plot(y~x)
x <- rnorm(1000)*y^0.1
plot(y~x)
x <- rnorm(1000)*y^0.1+10
plot(y~x)
x <- 5 + (3*rnorm(1000))
plot(y~x)
y <- rpois(1000,19)
x <- 5 + (3*rnorm(1000))
plot(y~x)
glm(y~x, family = 'poisson')
m<-glm(y~x, family = 'poisson')
summary(m)
sigmaHat(m)
plot(y~1)
m<-glm(y~x, family = 'poisson')
summary(m)
sigmaHat(m)
?S
mod.prestige <- lm(prestige ~ education + income + type, Prestige)
mod.prestige
S(mod.prestige, vcov.=hccm)
S(mod.prestige, brief=TRUE)
Confint(mod.prestige, vcov.=hccm)
# A logit model
mod.mroz <- glm(lfp ~ ., data=Mroz, family=binomial)
S(mod.mroz)
Confint(mod.mroz)
?S
?Boot
m1 <- lm(Fertility ~ ., swiss)
m1
betahat.boot <- Boot(m1, R=199) # 199 bootstrap samples--too small to be useful
betahat.boot
summary(betahat.boot)  # default summary
confint(betahat.boot)
hist(betahat.boot)
# Bootstrap for the estimated residual standard deviation:
sigmahat.boot <- Boot(m1, R=199, f=sigmaHat, labels="sigmaHat")
summary(sigmahat.boot)
confint(sigmahat.boot)
?deltaMethod
?compareCoefs
compareCoefs(mod.mroz)
mod1 <- lm(prestige ~ income + education, data=Duncan)
mod2 <- update(mod1, subset=-c(6,16))
mod3 <- update(mod1, . ~ . + type)
mod4 <- update(mod1, . ~ . + I(income + education)) # aliased coef.
compareCoefs(mod1)
compareCoefs(mod1, mod2, mod4)
compareCoefs(mod1)
compareCoefs(mod1, mod2, mod4)
compareCoefs(mod1, mod2, mod3, zvals=TRUE, pvals=TRUE)
compareCoefs(mod1, mod2, se=FALSE)
compareCoefs(mod1, mod1, vcov.=list(vcov, hccm))
names(Duncan)
mod2 <- lm(prestige ~ income + education + type, data=Duncan)
compareCoefs(mod1)
compareCoefs(mod1, mod2)
compareCoefs(mod1, mod2, zvals=TRUE, pvals=TRUE)
compareCoefs(mod1, mod2, se=FALSE)
compareCoefs(mod1, mod1, vcov.=list(vcov, hccm))
?confidenceEllipse
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan), vcov.=hccm)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan), vcov.=hccm)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
par(mfrow = c(1,3))
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan), vcov.=hccm)
confidenceEllipse(lm(prestige~income+education, data=Duncan),
L=c("income + education", "income - education"))
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Duncan), vcov.=hccm)
?confidenceEllipse
lm(prestige~., data=Duncan
)
m<-lm(prestige~., data=Duncan)
m<-lm(prestige~., data=Duncan)
confidenceEllipse(m)
par(mfrow=c(3,3))
confidenceEllipse(m)
par(mfrow=c(2,2))
confidenceEllipse(m)
confidenceEllipse(m)
?influenceIndexPlot
influenceIndexPlot(lm(prestige ~ income + education + type, Duncan))
?sigmaHat
m1 <- lm(prestige ~ income + education, data=Duncan)
sigmaHat(m1)
?qqPlot
qqPlot(~ income, data=Prestige, subset = type == "prof")
qqPlot(income ~ type, data=Prestige, layout=c(1, 3))
m <- lm(prestige ~ income + education + type, data=Duncan)
qqPlot(m, envelope=.99)
?vif
vif(lm(prestige ~ income + education, data=Duncan))
?Predict
index plots of influence and related diagnostics for a regression model)
getwd()
render_site()
setwd("~/covid19")
render_site()
