)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = 'Brasil'#,
#icon = "fa-hospital"
#,color = 'orange'
)
```
### Casos {.value-box}
```{r}
valueBox(as.numeric(subset(tabela_br, Município =='TOTAL')[3]),
icon = "fa-hospital"
#,color = 'orange'
)
```
### Óbitos {.value-box}
```{r}
valueBox(value = as.numeric(subset(tabela_br, Município =='TOTAL')[4]),
icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
Column {data-width=875}
-----------------------------------------------------------------------
###
<style>
body {
padding: 50px 0px 0px 0px;
<!--color: #000000-->
}
</style>
<center>
<table><tr>
<td> <img src="fig/ufpr.jpg" alt="Drawing" style="width: 200px;"/> </td>
</tr></table>
</center>
---
<center>
<font size="5">
<p align=”center”> <b> Monitoramento COVID-19  </b> </center>
</font>
</center>
---
#### COVID-19
A COVID-19 é uma doença causada pelo coronavírus SARS-CoV-2, descoberto em 31/12/19 após casos registrados na China. De acordo com a Organização Mundial de Saúde (OMS), cerca de 80% dos infectados podem ser assintomáticos e cerca de 20% podem requerer atendimento hospitalar por apresentarem dificuldade respiratória. Na prática, trata-se de um vírus com letalidade baixa mas altamente contagioso e que, até o momento, não há vacina. Portanto, caso a disseminação não seja devidamente controlada, é uma doença capaz de levar sistemas de saúde inteiros ao colapso como ocorreu em diversos países do mundo.
Os sintomas da COVID-19 podem variar de um simples resfriado até uma pneumonia severa. A transmissão acontece por meio de toque (na pessoa ou em superfície contaminada), gotículas de saliva, espirro, tosse, catarro, etc. O diagnóstico é feito através de exames laboratoriais.
---
#### Sobre esta página
O objetivo desta página é explorar e apresentar alguma análise descritiva dos dados a respeito do COVID-19 no Brasil com ênfase nos municípios do Paraná, especialmente, em Curitiba. O conteúdo varia desde gráficos estáticos com as curvas de casos confirmados e óbitos até mapas e dinâmicos.
Os [dados utilizados](https://covid19br.wcota.me/) para análise foram contabilizados a partir de boletins das secretarias estaduais e da plataforma oficial do Ministério da Saúde. Utilizou-se, principalmente, a base de [casos no Brasil por município]('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv') que dispunha de informações como: data, estado, município, casos e óbitos de forma cumulativa e diários.
Este material foi altamente motivado pela iniciativa [Portal COVID19](http://covid.c3sl.ufpr.br/) do [Setor de Ciências Exatas](http://www.exatas.ufpr.br/portal/) da [Universidade Federal do Paraná (UFPR)](https://www.ufpr.br/portalufpr/). O portal tem por objetivo agregar informações atualizadas, modelos estatísticos, visualizações de dados e links úteis sobre a pandemia COVID-19 no Brasil, mais especialmente no Estado do Paraná. O conteúdo disponibilizado é um esforço conjunto de pesquisadores dos Departamentos de Estatística, Informática, Física, Matemática e Saúde da Universidade Federal do Paraná e pesquisador do Insper-SP, com o apoio da Direção do Setor de Ciências Exatas da UFPR.
---
#### Links interessantes
<table><tr>
<td>
- [Dados utilizados nesta página](https://github.com/covidbr/covidbr.github.io)
- [Número de casos confirmados de COVID-19 no Brasil](https://covid19br.wcota.me/)
- [Portal COVID19 — Setor de Ciências Exatas/UFPR](http://covid.c3sl.ufpr.br/)
- [Ministério da Saúde](https://coronavirus.saude.gov.br/)
- [Secretaria de Saúde do Paraná](http://www.saude.pr.gov.br/modules/conteudo/conteudo.php?conteudo=3506)
- [Secretaria Municipal da Saúde de Curitiba](http://www.saude.curitiba.pr.gov.br/vigilancia/epidemiologica/vigilancia-de-a-a-z/12-vigilancia/1290-coronavirus.html)
</td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 150px;"/> </td>
<td>
<img src="fig/portal.png" alt="Drawing" style="width: 250px;"/>
</td>
</tr></table>
---
<center>
<table><tr>
<td> <p style="border:3px; border-style:solid; border-color:#000000; padding: 1em;">
<a href="https://lineu96.github.io/st/" target="_blank" title="Lineu Alberto Cavazani de Freitas">Lineu Alberto Cavazani de Freitas</a> <br>
Bacharel em Estatística <br>
Mestrando - PPG Informática <br>
Universidade Federal do Paraná<br>
</td>
</p>
</td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 50px;"/> </td>
<td> <img src="fig/ufpr.jpg" alt="Drawing" style="width: 190px;"/> </td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 30px;"/> </td>
<td> <img src="fig/exatas.png" alt="Drawing" style="width: 190px;"/> </td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 30px;"/> </td>
<td> <img src="fig/leg.png" alt="Drawing" style="width: 140px;"/>
</td>
</tr></table>
</center>
Column {data-width=125}
-----------------------------------------------------------------------
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### Hora de atualização {.value-box}
```{r}
valueBox(
value = hora,
icon = "fa-clock"
#,color = 'teal'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = 'Paraná'#,
#icon = "fa-hospital"
#,color = 'orange'
)
```
### Casos {.value-box}
```{r}
valueBox(sum(subset(tabela_br, Estado =='PR')[,3]),
icon = "fa-hospital"
#,color = 'orange'
)
```
### Óbitos {.value-box}
```{r}
valueBox(value = sum(subset(tabela_br, Estado =='PR')[,4]),
icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
Interatividade {data-icon="fa-comment" data-navmenu="Apresentação"}
=====================================
Column {data-width=125}
-----------------------------------------------------------------------
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### Data de atualização {.value-box}
```{r}
valueBox(
value = dia,
icon = "fa-calendar"
#,color = 'teal'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = 'Brasil'#,
#icon = "fa-hospital"
#,color = 'orange'
)
```
### Casos {.value-box}
```{r}
valueBox(as.numeric(subset(tabela_br, Município =='TOTAL')[3]),
icon = "fa-hospital"
#,color = 'orange'
)
```
### Óbitos {.value-box}
```{r}
valueBox(value = as.numeric(subset(tabela_br, Município =='TOTAL')[4]),
icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
Column {data-width=875}
-----------------------------------------------------------------------
###
<style>
body {
padding: 50px 0px 0px 0px;
<!--color: #000000-->
}
</style>
<center>
<table><tr>
<td> <img src="fig/ufpr.jpg" alt="Drawing" style="width: 200px;"/> </td>
</tr></table>
</center>
---
<center>
<font size="5">
<p align=”center”> <b> Interatividade  </b> </center>
</font>
</center>
---
Estão embutidos neste material uma série de tabelas e gráficos com diversas funcionalidades.
Algumas tabelas são de tamanho considerável e, para facilitar a visualização de uma linha particular ou mesmo diferentes tipos de ordenação das linhas em função das colunas há opções de pesquisa, filtragem e ordenação.
A maioria dos gráficos são interativos e possuem recursos para ampliar as figuras, percorrer eixos, omitir categorias, baixar as imagens, etc.
Em caso de dúvida quanto ao uso das funcionalidades acesse este [link](https://lineu96.github.io/st/img/proj_covid/interatividade.html), nele há alguns exemplos com imagens para orientar o uso de forma eficiente os recursos disponíveis.
---
<center>
<table><tr>
<td> <p style="border:3px; border-style:solid; border-color:#000000; padding: 1em;">
<a href="https://lineu96.github.io/st/" target="_blank" title="Lineu Alberto Cavazani de Freitas">Lineu Alberto Cavazani de Freitas</a> <br>
Bacharel em Estatística <br>
Mestrando - PPG Informática <br>
Universidade Federal do Paraná<br>
</td>
</p>
</td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 50px;"/> </td>
<td> <img src="fig/ufpr.jpg" alt="Drawing" style="width: 190px;"/> </td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 30px;"/> </td>
<td> <img src="fig/exatas.png" alt="Drawing" style="width: 190px;"/> </td>
<td> <img src="fig/LogoB.png" alt="Drawing" style="width: 30px;"/> </td>
<td> <img src="fig/leg.png" alt="Drawing" style="width: 140px;"/>
</td>
</tr></table>
</center>
Column {data-width=125}
-----------------------------------------------------------------------
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### Hora de atualização {.value-box}
```{r}
valueBox(
value = hora,
icon = "fa-clock"
#,color = 'teal'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = 'Paraná'#,
#icon = "fa-hospital"
#,color = 'orange'
)
```
### Casos {.value-box}
```{r}
valueBox(sum(subset(tabela_br, Estado =='PR')[,3]),
icon = "fa-hospital"
#,color = 'orange'
)
```
### Óbitos {.value-box}
```{r}
valueBox(value = sum(subset(tabela_br, Estado =='PR')[,4]),
icon = "fa-procedures"
#,color = 'red'
)
```
### {.value-box}
```{r}
valueBox(value = ''#,
#icon = "fa-procedures"
#,color = 'red'
)
```
---
Geral {data-orientation=column data-icon="fa-flag" data-navmenu="Brasil"}
=====================================
```{r, echo=FALSE}
dados_sta <- dados_br  %>%
group_by(state, date) %>%
summarise(Casos = sum(totalCases, na.rm = T),
Óbitos = sum(deaths, na.rm = T),
`Casos por dia` = sum(newCases, na.rm = T),
`Óbitos por dia` = sum(newDeaths, na.rm = T))
names(dados_sta) <- c('Estado', 'Data', 'Casos', 'Óbitos',
'Casos por dia', 'Óbitos por dia')
dados_sta_map <- subset(dados_sta, Data == last(dados_sta$Data))
dados_sta_map <- dados_sta_map[-nrow(dados_sta_map),]
dados_sta_map <- plyr::arrange(dados_sta_map,
desc(dados_sta_map$Casos))
```
Column {data-width=125}
-----------------------------------------------------------------------
### Casos no Brasil
```{r}
valueBox(
value = sum(dados_sta_map$Casos),
icon = "fa-hospital"
)
```
### Óbitos no Brasil {.value-box}
```{r}
valueBox(sum(dados_sta_map$Óbitos),
icon = "fa-procedures")
```
### Estado mais afetado {.value-box}
```{r}
valueBox(value = subset(dados_sta_map, Casos == max(dados_sta_map$Casos))[1],
icon = "fa-users")
valueBox(value = subset(dados_sta_map, Casos == max(dados_sta_map$Casos))[1],
icon = "fa-users")
estado <- subset(dados_sta_map, Casos == max(dados_sta_map$Casos))[1]
875/2
1100/2
library(rmarkdown)
render_site()
library(tidyverse)    # programação eficiente
library(stringr)      # tratamento de strings
library(tabulizer)    # importação de tabelas em arquivos pdf
library(gifski)       # geração de gifs a partir de um conjunto de pngs
library(sp)           # classes e métodos para dados espaciais
library(maptools)     # ferramentas para lidar com objetos espaciais
library(RColorBrewer) # criação de paleta de cores para mapas temáticos
library(plotly)       # graficos dinamicos
library(gganimate)    # graficos animados
# Dados por município do Brasil
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
# Dados por município do Brasil
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
# Dados por município do Brasil
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
dados_br$ibgeID <- as.character(dados_br$ibgeID)
#--------------------------------------------------------------
# Subset apenas do Paraná
dados_pr <- subset(dados_br, state == 'PR')
newDeaths <- spread(dados_pr[,c(1:5,6)], date, newDeaths)
deaths <- spread(dados_pr[,c(1:5,7)], date, deaths)
newCases <- spread(dados_pr[,c(1:5,8)], date, newCases)
totalCases <- spread(dados_pr[,c(1:5,9)], date, totalCases)
covid <- list(NULL)
covid[[1]] <- newDeaths
covid[[2]] <- deaths
covid[[3]] <- newCases
covid[[4]] <- totalCases
names(covid) <- c('newDeaths', 'deaths', 'newCases', 'totalCases')
# Mapa oficial do Paraná por municípios
load('maps/prmu.RData')
# Gerando variavel para join
prmu@data$CD_GEOCMU <- as.character(prmu@data$CD_GEOCMU)
# gerando um shp para cada informação
prmu_totalCases <- prmu
prmu_deaths <- prmu
prmu_totalCases@data <- dplyr::left_join(prmu_totalCases@data,
covid$totalCases,
by=c('CD_GEOCMU' = 'ibgeID'))
prmu_deaths@data <- dplyr::left_join(prmu_deaths@data,
covid$deaths,
by=c('CD_GEOCMU' = 'ibgeID'))
prmu_totalCases_cat <- prmu_totalCases
prmu_deaths_cat <- prmu_deaths
# Categorizando por faixa de valores
for (i in 1:length(names(covid$newDeaths)[5:length(covid$newDeaths)])) {
prmu_totalCases_cat@data$aux <- ifelse(prmu_totalCases_cat@data[5+i] > 0 & prmu_totalCases_cat@data[5+i]<11, '1-10','-')
prmu_totalCases_cat@data$aux <- ifelse(prmu_totalCases_cat@data[5+i] > 10 & prmu_totalCases_cat@data[5+i]<51, '11-50',prmu_totalCases_cat@data$aux)
prmu_totalCases_cat@data$aux <- ifelse(prmu_totalCases_cat@data[5+i] > 50 & prmu_totalCases_cat@data[5+i]<251, '51-250',prmu_totalCases_cat@data$aux)
prmu_totalCases_cat@data$aux <- ifelse(prmu_totalCases_cat@data[5+i] > 250, '>250',prmu_totalCases_cat@data$aux)
prmu_totalCases_cat@data$aux <- ifelse(is.na(prmu_totalCases_cat@data[5+i]) == TRUE | prmu_totalCases_cat@data[5+i] == 0, 'Nenhum',prmu_totalCases_cat@data$aux)
prmu_totalCases_cat@data[5+i] <- factor(prmu_totalCases_cat@data$aux, levels = c("Nenhum","1-10","11-50","51-250",">250"))
#--------------------------------------------------------------
prmu_deaths_cat@data$aux <- ifelse(prmu_deaths_cat@data[5+i] > 0 & prmu_deaths_cat@data[5+i]<6, '1-5','-')
prmu_deaths_cat@data$aux <- ifelse(prmu_deaths_cat@data[5+i] > 5 & prmu_deaths_cat@data[5+i]<11, '6-10',prmu_deaths_cat@data$aux)
prmu_deaths_cat@data$aux <- ifelse(prmu_deaths_cat@data[5+i] > 10 & prmu_deaths_cat@data[5+i]<16, '11-15',prmu_deaths_cat@data$aux)
prmu_deaths_cat@data$aux <- ifelse(prmu_deaths_cat@data[5+i] > 15, '>15',prmu_deaths_cat@data$aux)
prmu_deaths_cat@data$aux <- ifelse(is.na(prmu_deaths_cat@data[5+i]) == TRUE | prmu_deaths_cat@data[5+i] == 0, 'Nenhum',prmu_deaths_cat@data$aux)
prmu_deaths_cat@data[5+i] <- factor(prmu_deaths_cat@data$aux, levels = c("Nenhum","1-5","6-10","11-15",">15"))
}
prmu_totalCases_cat_tidy <- broom::tidy(prmu_totalCases_cat)
prmu_totalCases_cat$id <- row.names(prmu_totalCases_cat)
prmu_totalCases_cat_tidy <- left_join(prmu_totalCases_cat_tidy,
prmu_totalCases_cat@data)
prmu_deaths_cat_tidy <- broom::tidy(prmu_deaths_cat)
prmu_deaths_cat$id <- row.names(prmu_deaths_cat)
prmu_deaths_cat_tidy <- left_join(prmu_deaths_cat_tidy,
prmu_deaths_cat@data)
(ncol(prmu_totalCases_cat_tidy)-1)
for (i in (ncol(prmu_totalCases_cat_tidy)-1):(ncol(prmu_totalCases_cat_tidy)-1)) {
g<-ggplot(prmu_totalCases_cat_tidy,
aes_string(x = 'long', y = 'lat', group = 'group',
#fill = prmu_conf_tidy[,11])) +
fill = paste0("`",names(prmu_totalCases_cat_tidy[,i]),"`"))) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_bw()+
labs(title = paste0('Casos confirmados \n',
substr(names(prmu_totalCases_cat_tidy[,i]),9,10), '/',
substr(names(prmu_totalCases_cat_tidy[,i]),6,7), '/',
substr(names(prmu_totalCases_cat_tidy[,i]),1,4)))+
scale_fill_manual(values = c("#FFFFFF", "#F7BE81", "#FF8000",
"#B45F04", "#61380B"),
labels = levels(prmu_totalCases_cat_tidy$`2020-03-12`),
drop = FALSE)+
theme(legend.title=element_blank(),
plot.title = element_text(size=22))+
theme(plot.title = element_text(hjust = 0.5))
filename =paste0(names(prmu_totalCases_cat_tidy[i]),".png")
ggsave(filename=filename,
plot=g, device="png",
path=paste0("fig/gif_pr/casos"),
dpi=500, height = 7, width = 7)
#--------------------------------
g<-ggplot(prmu_deaths_cat_tidy,
aes_string(x = 'long', y = 'lat', group = 'group',
#fill = prmu_obit_tidy[,11])) +
fill = paste0("`",names(prmu_deaths_cat_tidy[,i]),"`"))) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_bw()+
labs(title = paste0('Óbitos confirmados \n',
substr(names(prmu_deaths_cat_tidy[,i]),9,10), '/',
substr(names(prmu_deaths_cat_tidy[,i]),6,7), '/',
substr(names(prmu_deaths_cat_tidy[,i]),1,4)))+
scale_fill_manual(values = c("#FFFFFF", "#F7BE81", "#FF8000",
"#B45F04", "#61380B"),
labels = levels(prmu_deaths_cat_tidy$`2020-03-12`),
drop = FALSE)+
theme(legend.title=element_blank(),
plot.title = element_text(size=22))+
theme(plot.title = element_text(hjust = 0.5))
filename =paste0(names(prmu_deaths_cat_tidy[i]),".png")
ggsave(filename=filename,
plot=g, device="png",
path=paste0("fig/gif_pr/obitos"),
dpi=500, height = 7, width = 7)
}
library(rmarkdown)
render_site()
library(tidyverse)    # programação eficiente
library(stringr)      # tratamento de strings
library(tabulizer)    # importação de tabelas em arquivos pdf
library(gifski)       # geração de gifs a partir de um conjunto de pngs
library(sp)           # classes e métodos para dados espaciais
library(maptools)     # ferramentas para lidar com objetos espaciais
library(RColorBrewer) # criação de paleta de cores para mapas temáticos
library(plotly)       # graficos dinamicos
library(gganimate)    # graficos animados
# Dados por município do Brasil
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
# Dados por município do Brasil
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
library(rmarkdown)
render_site()
getwd()
remove(list = ls())
getwd()
library(rmarkdown)
render_site()
library(rmarkdown)
render_site()
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
subset(dados_br, city == 'Florianópolis/SC')
subset(dados_br, city == 'Florianópolis/SC')
subset(dados_br, city == 'Florianópolis/SC' & date == '2020-05-01')
subset(dados_br, city == 'Florianópolis/SC' & date == '2020-05-01')
subset(dados_br, city == 'Florianópolis/SC')[,1:8]
dados_br <- read.csv('https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv',
sep = ',', header = T)
subset(dados_br, city == 'Florianópolis/SC' & date == '2020-05-01')
subset(dados_br, city == 'Florianópolis/SC' & date == '2020-05-01')
subset(dados_br, city == 'Florianópolis/SC' & date == '2020-05-01')[1:8]
subset(dados_br, city == 'Florianópolis/SC')[1:8]
subset(dados_br, city == 'Florianópolis/SC')[1:9]
rmarkdown::render_site()
